"""The setup plugin: when the meta-problem counter reaches a high level"""
import pbt
import os
from glob import glob
from os.path import join, dirname, basename
from collections import defaultdict
import time


def test_or_compiled_file(path):
    return (('__pycache__' in path) or
            path[-4:] == '.pyc' or
            path[-4:] == '.pyo' or
            basename(path)[:5] == 'test_')


def only_interesting_files(l):
    """Weeds out all compiled modules and test files."""
    return filter(lambda path: not test_or_compiled_file(path), l)


def recursive(root, spec):
    files = defaultdict(lambda: [])
    ans = []

    for path in only_interesting_files(glob(spec)):
        base = join(root, dirname(path))

        files[base].append(path)

    for i in files.items():
        ans.append(i)

    return ans


def writeln(file, line=""):
    "Pascal's turning in its grave."
    file.write(line)
    file.write(os.linesep)


@pbt.command(name="setup")
def main(ctx, args, p):
    """Generates a valid setup.py file.
    It uses the info found in project.pbt."""

    # NOTE: yes, short names, 'cause I'm gonna write them a gazillion times
    f = open('setup.py', 'w+')
    s = p.settings

    # TODO: support other major versions
    writeln(f, "#! /usr/bin/env python3")
    writeln(f)
    writeln(f, "# file generated by pbt.plugins.setup on %s" %
            time.strftime("%a, %d %b %Y %H:%M:%S %z"))
    writeln(f)
    writeln(f, "from distutils.core import setup")
    writeln(f)
    writeln(f, "setup(")

    # lazy, me?
    def kv(k, v):
        writeln(f, "    %s='%s'," % (k, v))

    def kvs(k, vs):
        writeln(f, "    %s=%s," % (k, vs))

    kv('name', p.name)
    kv('version', p.version)
    kv('description', p.description)
    # TODO: author
    kv('url', p.url)
    kvs('packages', s.packages)
    # TODO: run the plugin that generates the binary from the entry point
    kvs('scripts', s.scripts)
    kv('license', p.license['name'])
    # TODO: classifiers
    # TODO: requires

    # plugins
    # according to the Debian Python Policy, they should go in
    # /usr/share/<program>
    # NOTE: for the time being, we're gonna install them in the user's xdg.data
    # dir

    # first, make sure the dir exists
    # save_data_path("pbt")

    # the user's dir comes first
    # plugins = recursive(next(load_data_paths('pbt')), 'plugins/*/*')
    # kvs('data_files', plugins)

    writeln(f, "    )")
    f.close()

    print("setup.py file written.")
